{"version":3,"sources":["Generator.ts","Storage.ts","Barcode.tsx","App.tsx","Util.ts","index.tsx"],"names":["generateRandomCode","Math","floor","min","max","random","fileName","Storage","fileId","numbers","Set","setMessage","this","a","clear","gapi","client","drive","files","list","q","listResponse","result","length","id","get","alt","fields","fileResponse","status","body","split","map","x","parseInt","Error","load","n","add","save","delete","NaN","content","Array","from","keys","toString","padStart","join","undefined","create","resource","name","mimeType","parents","createResponse","request","path","method","headers","params","uploadType","updateResponse","Barcode","value","inputRef","useBarcode","options","width","height","ref","CLIENT_ID","SCOPES","storage","App","useState","header","setHeader","quantity","setQuantity","codes","setCodes","isLoggedIn","setIsLoggedIn","isDriveReady","setIsDriveReady","message","onGoogleError","addNumbers","window","print","useEffect","init","callback","clientId","scope","auth2","getAuthInstance","isSignedIn","listen","onerror","AppBar","position","Toolbar","className","Typography","variant","Button","color","buttonText","onSuccess","cookiePolicy","TextField","label","type","onChange","e","target","fullWidth","inputProps","maxLength","onClick","size","offset","_","i","range","code","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.325249b5.chunk.js","sourcesContent":["function interval(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function generateRandomCode() {\n  return Math.floor((interval(1, 99999999999999)))\n}\n","const ep = \"https://www.googleapis.com/upload/drive/v3\"\nconst fileName = \"random-unique-codes.txt\"\n\nexport class Storage {\n  fileId: string | undefined;\n  numbers: Set<number> = new Set();\n  setMessage: (message: string) => void = () => { };\n\n  init(setMessage: (message: string) => void) {\n    this.setMessage = setMessage;\n  }\n\n  async load() {\n    this.numbers.clear()\n\n    const listResponse = await gapi.client.drive.files.list({ 'fields': \"files(id, name, trashed)\", q: `name='${fileName}' and trashed=false` })\n    const files = listResponse.result.files;\n    if (!files || files.length <= 0)\n      return\n\n    this.fileId = files[0].id\n    if (!this.fileId)\n      return\n\n    const fileResponse = await gapi.client.drive.files.get({ fileId: this.fileId, alt: \"media\", fields: \"id\" })\n\n    switch (listResponse.status) {\n      case 200:\n        this.numbers = new Set(fileResponse.body.split(\"\\n\").map(x => parseInt(x)))\n        break;\n      default:\n        throw new Error('Error reading file, ' + fileResponse);\n    }\n  }\n\n  async addNumbers(numbers: number[]): Promise<void> {\n    this.setMessage(\"Fetching database...\")\n\n    await this.load()\n\n    for (const n of numbers)\n      this.numbers.add(n)\n\n    await this.save()\n  }\n\n  async save() {\n    this.setMessage(\"Updating database...\")\n\n    this.numbers.delete(NaN)\n    this.numbers.delete(0)\n\n    const content = Array.from(this.numbers.keys()).map(x => x.toString().padStart(14, \"0\")).join(\"\\n\")\n\n    if (this.fileId === undefined) {\n      const createResponse = await gapi.client.drive.files.create({\n        resource: {\n          name: fileName,\n          mimeType: 'text/plain',\n          parents: [\"root\"],\n        },\n        fields: \"id\"\n      })\n\n      switch (createResponse.status) {\n        case 200:\n          this.fileId = createResponse.result.id\n          break;\n        default:\n          throw new Error('Error creating database file, ' + createResponse);\n      }\n    }\n\n    const updateResponse = await gapi.client.request({\n      path: `${ep}/files/` + this.fileId,\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': \"text/plain\",\n        \"Content-Length\": content.length,\n      },\n      params: { uploadType: \"media\" },\n      body: content\n    })\n\n    switch (updateResponse.status) {\n      case 200:\n        break;\n      default:\n        throw new Error('Error updating database file, ' + updateResponse);\n    }\n  }\n}","import { useBarcode } from 'react-barcodes';\n\ninterface BarcodeProps {\n  name: string\n  value: string\n}\n\nconst Barcode = ({ name, value }: BarcodeProps) => {\n  const { inputRef } = useBarcode({\n    value: value,\n    options: {\n      width: 2,\n      height: 100\n    }\n  });\n\n  return <>\n    <div>{name}</div>\n    <svg ref={inputRef} />\n  </>;\n}\n\nexport default Barcode","import { useEffect, useState } from 'react';\nimport { AppBar, Button, TextField, Toolbar, Typography } from '@material-ui/core';\nimport { GoogleLogin } from 'react-google-login';\nimport { GoogleLogout } from 'react-google-login';\nimport { generateRandomCode } from \"./Generator\"\nimport { Storage } from './Storage'\nimport { range } from './Util'\nimport Barcode from './Barcode'\nimport './App.scss';\n\nconst CLIENT_ID = \"843901847350-30igg13jkqtha7fnb3eh7seatf09n93t.apps.googleusercontent.com\"\nconst SCOPES = \"https://www.googleapis.com/auth/drive.file\";\n\nconst storage = new Storage()\n\nfunction App() {\n  const [header, setHeader] = useState(\"Header\")\n  const [quantity, setQuantity] = useState(18)\n  const [codes, setCodes] = useState<number[]>([0])\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean | undefined>();\n  const [isDriveReady, setIsDriveReady] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n\n  const onGoogleError = () => setMessage(\"Failed loading Google Client\")\n\n  useEffect(() => {\n    storage.init(setMessage)\n\n    gapi.load(\"client:auth2\", {\n      callback: async () => {\n        try {\n          await gapi.client.init({ clientId: CLIENT_ID, scope: SCOPES })\n          gapi.auth2.getAuthInstance().isSignedIn.listen(setIsLoggedIn);\n          setIsLoggedIn(gapi.auth2.getAuthInstance().isSignedIn.get());\n          await gapi.client.load('drive', 'v3');\n          setIsDriveReady(true)\n        }\n        catch {\n          onGoogleError()\n        }\n      },\n      onerror: onGoogleError\n    });\n  }, [])\n\n  function generateNewCodes() {\n    setCodes(range(quantity).map(() => generateRandomCode()))\n  }\n\n  async function print() {\n    if (isLoggedIn && isDriveReady) {\n      try {\n        await storage.addNumbers(codes)\n        setMessage(\"\")\n      }\n      catch (e) {\n        setMessage(\"An error ocurred while trying to sync with the cloud. Printing codes that are not stored in the cloud is not recommended.\")\n      }\n    }\n\n    window.print()\n  }\n\n  return <>\n    <AppBar position=\"static\">\n      <Toolbar className=\"toolbar\">\n        <Typography variant=\"h6\">\n          Random Barcode Generator\n        </Typography>\n        <Button color=\"inherit\"> {!isLoggedIn && <GoogleLogin\n          clientId={CLIENT_ID}\n          buttonText=\"Log in with Google\"\n          onSuccess={() => setIsLoggedIn(true)}\n          scope={SCOPES}\n          cookiePolicy={'single_host_origin'}\n        />}\n          {isLoggedIn &&\n            <GoogleLogout\n              clientId={CLIENT_ID}\n              buttonText=\"Logout\">\n            </GoogleLogout>}\n        </Button>\n      </Toolbar>\n    </AppBar>\n    <main>\n      <div className=\"generator-config\">\n        <TextField label=\"Header\" type=\"text\" value={header} onChange={e => setHeader(e.target.value)} fullWidth />\n        <TextField label=\"Quantity\" type=\"number\" inputProps={{ maxLength: 3 }} value={quantity} onChange={e => setQuantity(parseInt(e.target.value))} fullWidth />\n        <Button variant=\"contained\" color=\"primary\" onClick={generateNewCodes} fullWidth>Generate Barcodes</Button>\n        {codes.length > 0 && codes[0] !== 0 &&\n          <Button variant=\"outlined\" color=\"primary\" onClick={print} fullWidth>{isLoggedIn && isDriveReady && \"Save & \"}Print</Button>}\n        {isLoggedIn !== undefined && !isLoggedIn &&\n          <p>You must be logged in to prevent duplicate numbers.</p>}\n        <p>{message}</p>\n      </div>\n      <ul className=\"code-list\">\n        {codes.map(code =>\n          <li key={code} className=\"code-list-item\">\n            <Barcode key={code} name={header} value={code.toString().padStart(14, \"0\")} />\n          </li>)}\n      </ul>\n    </main>\n    <footer>\n      Copyright (C) 2021 Jose Torres\n    </footer>\n  </>\n}\n\nexport default App;\n","export function range(size: number, offset: number = 1) {\n  return Array.from({ length: size }, (_, i) => i + offset);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
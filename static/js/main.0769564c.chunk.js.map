{"version":3,"sources":["Generator.ts","Util.ts","Storage.ts","Barcode.tsx","App.tsx","index.tsx"],"names":["generateRandomCode","Math","floor","min","max","random","padCode","code","toString","padStart","fileName","Storage","fileId","codes","Set","this","clear","gapi","client","drive","files","list","q","listResponse","result","length","id","get","alt","fields","fileResponse","status","unserialize","body","Error","add","undefined","createFile","content","serialize","request","path","method","headers","params","uploadType","create","resource","name","mimeType","parents","createResponse","deleteInvalidCodes","Array","from","keys","map","join","contents","split","parseInt","delete","NaN","Barcode","value","inputRef","useBarcode","options","width","height","ref","CLIENT_ID","SCOPES","storage","App","useState","header","setHeader","quantity","setQuantity","setCodes","isLoggedIn","setIsLoggedIn","isDriveReady","setIsDriveReady","message","setMessage","canPrint","onGoogleError","a","load","save","window","print","useEffect","callback","init","clientId","scope","auth2","getAuthInstance","isSignedIn","listen","onerror","AppBar","position","Toolbar","className","Typography","buttonText","onSuccess","icon","cookiePolicy","TextField","label","type","onChange","e","target","fullWidth","inputProps","maxLength","Button","variant","color","onClick","size","offset","_","i","range","ReactDOM","render","StrictMode","ThemeProvider","theme","createTheme","palette","primary","main","document","getElementById"],"mappings":"6TAIO,SAASA,IACd,OAAOC,KAAKC,OALIC,EAKY,EALCC,EAKE,eAJxBH,KAAKC,MAAMD,KAAKI,UAAYD,EAAMD,EAAM,GAAKA,KADtD,IAAkBA,EAAaC,E,4BCIxB,SAASE,EAAQC,GACtB,OAAOA,EAAKC,WAAWC,SAAS,GAAI,KCHtC,IACMC,EAAW,0BAEJC,EAAb,iDACEC,YADF,OAEEC,MAAqB,IAAIC,IAF3B,+EAIE,+FACEC,KAAKF,MAAMG,QADb,SAG6BC,KAAKC,OAAOC,MAAMC,MAAMC,KAAK,CAAE,OAAU,2BAA4BC,EAAE,SAAD,OAAWZ,EAAX,yBAHnG,UAGQa,EAHR,QAIQH,EAAQG,EAAaC,OAAOJ,UACpBA,EAAMK,QAAU,GALhC,oDAQEV,KAAKH,OAASQ,EAAM,GAAGM,GAClBX,KAAKH,OATZ,oEAY6BK,KAAKC,OAAOC,MAAMC,MAAMO,IAAI,CAAEf,OAAQG,KAAKH,OAAQgB,IAAK,QAASC,OAAQ,OAZtG,QAYQC,EAZR,YAcUP,EAAaQ,OAdvB,OAeS,MAfT,gCAgBMhB,KAAKiB,YAAYF,EAAaG,MAhBpC,mCAmBY,IAAIC,MAAM,uBAAyBJ,GAnB/C,iDAJF,8GA2BE,WAAiBjB,GAAjB,yFACqBA,GADrB,IACE,2BAAWN,EAAX,QACEQ,KAAKF,MAAMsB,IAAI5B,GAFnB,8EA3BF,gHAgCE,8FACsB6B,IAAhBrB,KAAKH,OADX,gCAEUG,KAAKsB,aAFf,cAIQC,EAAUvB,KAAKwB,YAJvB,SAMuBtB,KAAKC,OAAOsB,QAAQ,CACvCC,KAAM,UA1CD,6CA0CC,WAAiB1B,KAAKH,OAC5B8B,OAAQ,QACRC,QAAS,CACP,eAAgB,aAChB,iBAAkBL,EAAQb,QAE5BmB,OAAQ,CAAEC,WAAY,SACtBZ,KAAMK,IAdV,OAMQd,EANR,YAiBUA,EAAOO,OAjBjB,OAkBS,MAlBT,mEAqBY,IAAIG,MAAM,iCAAmCV,GArBzD,iDAhCF,qHAyDE,oGAC+BP,KAAKC,OAAOC,MAAMC,MAAM0B,OAAO,CAC1DC,SAAU,CACRC,KAAMtC,EACNuC,SAAU,aACVC,QAAS,CAAC,SAEZrB,OAAQ,OAPZ,OACQsB,EADR,YAUUA,EAAepB,OAVzB,OAWS,MAXT,6BAYMhB,KAAKH,OAASuC,EAAe3B,OAAOE,GAZ1C,iCAeY,IAAIQ,MAAM,iCAAmCiB,GAfzD,gDAzDF,6EA4EE,WAEE,OADApC,KAAKqC,qBACEC,MAAMC,KAAKvC,KAAKF,MAAM0C,QAAQC,KAAI,SAAAjD,GAAI,OAAID,EAAQC,MAAOkD,KAAK,QA9EzE,yBAiFE,SAAoBC,GAClB3C,KAAKF,MAAQ,IAAIC,IAAI4C,EAASC,MAAM,MAAMH,KAAI,SAAAjD,GAAI,OAAIqD,SAASrD,OAC/DQ,KAAKqC,uBAnFT,gCAsFE,WACErC,KAAKF,MAAMgD,OAAOC,KAClB/C,KAAKF,MAAMgD,OAAO,OAxFtB,K,eCiBeE,EAfC,SAAC,GAAmC,IAAjCf,EAAgC,EAAhCA,KAAMgB,EAA0B,EAA1BA,MACfC,EAAaC,YAAW,CAC9BF,MAAOA,EACPG,QAAS,CACPC,MAAO,EACPC,OAAQ,OAJJJ,SAQR,OAAO,qCACL,8BAAMjB,IACN,qBAAKsB,IAAKL,QCRRM,G,MAAY,4EACZC,EAAS,6CAETC,EAAU,IAAI9D,EAoGL+D,MAlGf,WACE,MAA4BC,mBAAS,UAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAmB,CAAC,IAA9C,mBAAO9D,EAAP,KAAcmE,EAAd,KACA,EAAoCL,oBAAkB,GAAtD,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAwCP,oBAAkB,GAA1D,mBAAOQ,EAAP,KAAqBC,EAArB,KACA,EAA8BT,mBAAiB,IAA/C,mBAAOU,EAAP,KAAgBC,EAAhB,KACMC,EAAWN,GAAcE,EAEzBK,EAAgB,kBAAMF,EAAW,iCAT1B,4CAiCb,sBAAAG,EAAA,0DACMR,IAAcE,EADpB,iCAGMG,EAAW,wBAHjB,SAIYb,EAAQiB,OAJpB,uBAKYjB,EAAQtC,IAAItB,GALxB,cAMMyE,EAAW,wBANjB,UAOYb,EAAQkB,OAPpB,QAQML,EAAW,IARjB,kDAWMA,EAAW,6HAXjB,QAeEM,OAAOC,QAfT,2DAjCa,sBAmDb,OAxCAC,qBAAU,WACR7E,KAAKyE,KAAK,eAAgB,CACxBK,SAAS,WAAD,4BAAE,sBAAAN,EAAA,+EAEAxE,KAAKC,OAAO8E,KAAK,CAAEC,SAAU1B,EAAW2B,MAAO1B,IAF/C,cAGNU,EAAcjE,KAAKkF,MAAMC,kBAAkBC,WAAW1E,OACtDV,KAAKkF,MAAMC,kBAAkBC,WAAWC,OAAOpB,GAJzC,SAKAjE,KAAKC,OAAOwE,KAAK,QAAS,MAL1B,OAMNN,GAAgB,GANV,kDASNI,IATM,0DAAF,kDAAC,GAYTe,QAASf,MAEV,IAwBI,qCACL,cAACgB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,CAASC,UAAU,UAAnB,UACE,cAACC,EAAA,EAAD,wCACE3B,GAAc,cAAC,cAAD,CACdgB,SAAU1B,EACVsC,WAAW,SACXC,UAAW,kBAAM5B,GAAc,IAC/BgB,MAAO1B,EACPuC,MAAM,EACNJ,UAAU,sBACVK,aAAc,uBAEf/B,GACC,cAAC,eAAD,CACEgB,SAAU1B,EACVoC,UAAU,sBACVE,WAAW,gBAInB,iCACE,sBAAKF,UAAU,SAAf,UACE,cAACM,EAAA,EAAD,CAAWC,MAAM,SAASC,KAAK,OAAOnD,MAAOY,EAAQwC,SAAU,SAAAC,GAAC,OAAIxC,EAAUwC,EAAEC,OAAOtD,QAAQuD,WAAS,IACxG,cAACN,EAAA,EAAD,CAAWC,MAAM,WAAWC,KAAK,SAASK,WAAY,CAAEC,UAAW,GAAKzD,MAAOc,EAAUsC,SAAU,SAAAC,GAAC,OAAItC,EAAYnB,SAASyD,EAAEC,OAAOtD,SAASuD,WAAS,IACxJ,cAACG,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QA/ClD,WACE7C,EH7CG,SAAe8C,GAAmC,IAArBC,EAAoB,uDAAH,EACnD,OAAO1E,MAAMC,KAAK,CAAE7B,OAAQqG,IAAQ,SAACE,EAAGC,GAAJ,OAAUA,EAAIF,KG4CvCG,CAAMpD,GAAUtB,KAAI,kBAAMxD,SA8CwCuH,WAAS,EAAhF,+BACC1G,EAAM,GAAK,GACV,eAAC6G,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAAUC,QA9EtC,2CA8EsDN,WAAS,EAApE,UAAsEhC,GAAY,UAAlF,WAEDJ,IAAiBF,GAChB,cAAC2B,EAAA,EAAD,mEAEF,cAACA,EAAA,EAAD,UAAavB,OAEf,oBAAIsB,UAAU,eAAd,SACG9F,EAAM2C,KAAI,SAAAjD,GAAI,OACb,oBAAeoG,UAAU,oBAAzB,SACE,cAAC,EAAD,CAAoB3D,KAAM4B,EAAQZ,MAAO1D,EAAQC,IAAnCA,IADPA,WAKf,iCACE,cAACqG,EAAA,EAAD,mD,iBCtGNuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAeC,MAAOC,YAAY,CAChCC,QAAS,CACPC,QAAS,CACPC,KAAM,cAHZ,SAOE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.0769564c.chunk.js","sourcesContent":["function interval(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function generateRandomCode() {\n  return Math.floor((interval(1, 99999999999999)))\n}\n","export function range(size: number, offset: number = 1) {\n  return Array.from({ length: size }, (_, i) => i + offset);\n}\n\nexport function padCode(code: number) {\n  return code.toString().padStart(14, \"0\");\n}","import { padCode } from \"./Util\";\n\nconst ep = \"https://www.googleapis.com/upload/drive/v3\"\nconst fileName = \"random-unique-codes.txt\"\n\nexport class Storage {\n  fileId: string | undefined;\n  codes: Set<number> = new Set();\n\n  public async load() {\n    this.codes.clear()\n\n    const listResponse = await gapi.client.drive.files.list({ 'fields': \"files(id, name, trashed)\", q: `name='${fileName}' and trashed=false` })\n    const files = listResponse.result.files;\n    if (!files || files.length <= 0)\n      return\n\n    this.fileId = files[0].id\n    if (!this.fileId)\n      return\n\n    const fileResponse = await gapi.client.drive.files.get({ fileId: this.fileId, alt: \"media\", fields: \"id\" })\n\n    switch (listResponse.status) {\n      case 200:\n        this.unserialize(fileResponse.body);\n        break;\n      default:\n        throw new Error('Error reading file, ' + fileResponse);\n    }\n  }\n\n  public async add(codes: number[]): Promise<void> {\n    for (const code of codes)\n      this.codes.add(code)\n  }\n\n  public async save() {\n    if (this.fileId === undefined)\n      await this.createFile();\n\n    const content = this.serialize()\n\n    const result = await gapi.client.request({\n      path: `${ep}/files/` + this.fileId,\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': \"text/plain\",\n        \"Content-Length\": content.length,\n      },\n      params: { uploadType: \"media\" },\n      body: content\n    })\n\n    switch (result.status) {\n      case 200:\n        break;\n      default:\n        throw new Error('Error updating database file, ' + result);\n    }\n  }\n\n  private async createFile() {\n    const createResponse = await gapi.client.drive.files.create({\n      resource: {\n        name: fileName,\n        mimeType: 'text/plain',\n        parents: [\"root\"],\n      },\n      fields: \"id\"\n    });\n\n    switch (createResponse.status) {\n      case 200:\n        this.fileId = createResponse.result.id;\n        break;\n      default:\n        throw new Error('Error creating database file, ' + createResponse);\n    }\n  }\n\n  private serialize() {\n    this.deleteInvalidCodes();\n    return Array.from(this.codes.keys()).map(code => padCode(code)).join(\"\\n\");\n  }\n\n  private unserialize(contents: string) {\n    this.codes = new Set(contents.split(\"\\n\").map(code => parseInt(code)));\n    this.deleteInvalidCodes();\n  }\n\n  private deleteInvalidCodes() {\n    this.codes.delete(NaN);\n    this.codes.delete(0);\n  }\n}","import { useBarcode } from 'react-barcodes';\n\ninterface BarcodeProps {\n  name: string\n  value: string\n}\n\nconst Barcode = ({ name, value }: BarcodeProps) => {\n  const { inputRef } = useBarcode({\n    value: value,\n    options: {\n      width: 2,\n      height: 100\n    }\n  });\n\n  return <>\n    <div>{name}</div>\n    <svg ref={inputRef} />\n  </>;\n}\n\nexport default Barcode","import { useEffect, useState } from 'react';\nimport { AppBar, Button, TextField, Toolbar, Typography } from '@material-ui/core';\nimport { GoogleLogin } from 'react-google-login';\nimport { GoogleLogout } from 'react-google-login';\nimport { generateRandomCode } from \"./Generator\"\nimport { Storage } from './Storage'\nimport { padCode, range } from './Util'\nimport Barcode from './Barcode'\nimport './App.scss';\n\nconst CLIENT_ID = \"843901847350-30igg13jkqtha7fnb3eh7seatf09n93t.apps.googleusercontent.com\"\nconst SCOPES = \"https://www.googleapis.com/auth/drive.file\";\n\nconst storage = new Storage()\n\nfunction App() {\n  const [header, setHeader] = useState(\"Header\")\n  const [quantity, setQuantity] = useState(18)\n  const [codes, setCodes] = useState<number[]>([0])\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [isDriveReady, setIsDriveReady] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const canPrint = isLoggedIn && isDriveReady;\n\n  const onGoogleError = () => setMessage(\"Failed loading Google Client\")\n\n  useEffect(() => {\n    gapi.load(\"client:auth2\", {\n      callback: async () => {\n        try {\n          await gapi.client.init({ clientId: CLIENT_ID, scope: SCOPES })\n          setIsLoggedIn(gapi.auth2.getAuthInstance().isSignedIn.get());\n          gapi.auth2.getAuthInstance().isSignedIn.listen(setIsLoggedIn);\n          await gapi.client.load('drive', 'v3');\n          setIsDriveReady(true)\n        }\n        catch {\n          onGoogleError()\n        }\n      },\n      onerror: onGoogleError\n    });\n  }, [])\n\n  function generateNewCodes() {\n    setCodes(range(quantity).map(() => generateRandomCode()))\n  }\n\n  async function print() {\n    if (isLoggedIn && isDriveReady) {\n      try {\n        setMessage(\"Fetching database...\")\n        await storage.load()\n        await storage.add(codes)\n        setMessage(\"Updating database...\")\n        await storage.save()\n        setMessage(\"\")\n      }\n      catch {\n        setMessage(\"An error ocurred while trying to sync with the cloud. Printing codes that are not stored in the cloud is not recommended.\")\n      }\n    }\n\n    window.print()\n  }\n\n  return <>\n    <AppBar position=\"sticky\">\n      <Toolbar className=\"toolbar\">\n        <Typography>Random Barcode Generator</Typography>\n        {!isLoggedIn && <GoogleLogin\n          clientId={CLIENT_ID}\n          buttonText=\"Log in\"\n          onSuccess={() => setIsLoggedIn(true)}\n          scope={SCOPES}\n          icon={true}\n          className=\"google-login-button\"\n          cookiePolicy={'single_host_origin'}\n        />}\n        {isLoggedIn &&\n          <GoogleLogout\n            clientId={CLIENT_ID}\n            className=\"google-login-button\"\n            buttonText=\"Logout\">\n          </GoogleLogout>}\n      </Toolbar>\n    </AppBar>\n    <main>\n      <div className=\"config\">\n        <TextField label=\"Header\" type=\"text\" value={header} onChange={e => setHeader(e.target.value)} fullWidth />\n        <TextField label=\"Quantity\" type=\"number\" inputProps={{ maxLength: 3 }} value={quantity} onChange={e => setQuantity(parseInt(e.target.value))} fullWidth />\n        <Button variant=\"contained\" color=\"primary\" onClick={generateNewCodes} fullWidth>Generate Barcodes</Button>\n        {codes[0] > 0 &&\n          <Button variant=\"outlined\" color=\"primary\" onClick={print} fullWidth>{canPrint && \"Save & \"}Print</Button>\n        }\n        {isDriveReady && !isLoggedIn &&\n          <Typography>You must be logged in to prevent duplicate barcodes.</Typography>\n        }\n        <Typography>{message}</Typography>\n      </div>\n      <ul className=\"barcode-list\">\n        {codes.map(code =>\n          <li key={code} className=\"barcode-list-item\">\n            <Barcode key={code} name={header} value={padCode(code)} />\n          </li>)}\n      </ul>\n    </main>\n    <footer>\n      <Typography>Copyright (C) 2021 Jose Torres</Typography>\n    </footer>\n  </>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { createTheme, ThemeProvider } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={createTheme({\n      palette: {\n        primary: {\n          main: \"#101010\",\n        }\n      }\n    })}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
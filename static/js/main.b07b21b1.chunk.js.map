{"version":3,"sources":["Generator.ts","Storage.ts","Barcode.tsx","App.tsx","Util.ts","index.tsx"],"names":["generateRandomCode","Math","floor","min","max","random","fileName","Storage","fileId","numbers","Set","setMessage","this","a","clear","gapi","client","drive","files","list","q","listResponse","result","length","id","get","alt","fields","fileResponse","status","body","split","map","x","parseInt","Error","load","n","add","save","delete","NaN","content","Array","from","keys","toString","padStart","join","undefined","create","resource","name","mimeType","parents","createResponse","request","path","method","headers","params","uploadType","updateResponse","Barcode","value","inputRef","useBarcode","options","width","height","ref","CLIENT_ID","SCOPES","storage","App","useState","header","setHeader","quantity","setQuantity","codes","setCodes","isLoggedIn","setIsLoggedIn","isDriveReady","setIsDriveReady","message","onGoogleError","addNumbers","window","print","useEffect","init","callback","clientId","scope","auth2","getAuthInstance","isSignedIn","listen","onerror","AppBar","position","Toolbar","className","Typography","variant","Button","color","buttonText","onSuccess","cookiePolicy","TextField","label","type","onChange","e","target","fullWidth","inputProps","maxLength","onClick","size","offset","_","i","range","code","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b07b21b1.chunk.js","sourcesContent":["function interval(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function generateRandomCode() {\r\n  return Math.floor((interval(1, 99999999999999)))\r\n}\r\n","const ep = \"https://www.googleapis.com/upload/drive/v3\"\r\nconst fileName = \"random-unique-codes.txt\"\r\n\r\nexport class Storage {\r\n\tfileId: string | undefined;\r\n\tnumbers: Set<number> = new Set();\r\n\tsetMessage: (message: string) => void = () => { };\r\n\r\n\tinit(setMessage: (message: string) => void) {\r\n\t\tthis.setMessage = setMessage;\r\n\t}\r\n\r\n\tasync load() {\r\n\t\tthis.numbers.clear()\r\n\r\n\t\tvar listResponse = await gapi.client.drive.files.list({ 'fields': \"files(id, name, trashed)\", q: `name='${fileName}' and trashed=false` })\r\n\t\tvar files = listResponse.result.files;\r\n\t\tif (!files || files.length <= 0)\r\n\t\t\treturn\r\n\r\n\t\tthis.fileId = files[0].id\r\n\t\tif (!this.fileId)\r\n\t\t\treturn\r\n\r\n\t\tvar fileResponse = await gapi.client.drive.files.get({ fileId: this.fileId, alt: \"media\", fields: \"id\" })\r\n\r\n\t\tswitch (listResponse.status) {\r\n\t\t\tcase 200:\r\n\t\t\t\tthis.numbers = new Set(fileResponse.body.split(\"\\n\").map(x => parseInt(x)))\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Error reading file, ' + fileResponse);\r\n\t\t}\r\n\t}\r\n\r\n\tasync addNumbers(numbers: number[]): Promise<void> {\r\n\t\tthis.setMessage(\"Fetching database...\")\r\n\r\n\t\tawait this.load()\r\n\r\n\t\tfor (const n of numbers)\r\n\t\t\tthis.numbers.add(n)\r\n\r\n\t\tawait this.save()\r\n\t}\r\n\r\n\tasync save() {\r\n\t\tthis.setMessage(\"Updating database...\")\r\n\r\n\t\tthis.numbers.delete(NaN)\r\n\t\tthis.numbers.delete(0)\r\n\r\n\t\tvar content = Array.from(this.numbers.keys()).map(x => x.toString().padStart(14, \"0\")).join(\"\\n\")\r\n\r\n\t\tif (this.fileId == undefined) {\r\n\t\t\tvar createResponse = await gapi.client.drive.files.create({\r\n\t\t\t\tresource: {\r\n\t\t\t\t\tname: fileName,\r\n\t\t\t\t\tmimeType: 'text/plain',\r\n\t\t\t\t\tparents: [\"root\"],\r\n\t\t\t\t},\r\n\t\t\t\tfields: \"id\"\r\n\t\t\t})\r\n\r\n\t\t\tswitch (createResponse.status) {\r\n\t\t\t\tcase 200:\r\n\t\t\t\t\tthis.fileId = createResponse.result.id\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error('Error creating database file, ' + createResponse);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar updateResponse = await gapi.client.request({\r\n\t\t\tpath: `${ep}/files/` + this.fileId,\r\n\t\t\tmethod: \"PATCH\",\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': \"text/plain\",\r\n\t\t\t\t\"Content-Length\": content.length,\r\n\t\t\t},\r\n\t\t\tparams: { uploadType: \"media\" },\r\n\t\t\tbody: content\r\n\t\t})\r\n\r\n\t\tswitch (updateResponse.status) {\r\n\t\t\tcase 200:\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Error updating database file, ' + updateResponse);\r\n\t\t}\r\n\t}\r\n}","import { useBarcode } from 'react-barcodes';\r\n\r\ninterface BarcodeProps {\r\n  name: string\r\n  value: string\r\n}\r\n\r\nconst Barcode = ({ name, value }: BarcodeProps) => {\r\n  const { inputRef } = useBarcode({\r\n    value: value,\r\n    options: {\r\n      width: 2,\r\n      height: 100\r\n    }\r\n  });\r\n\r\n  return <>\r\n    <div>{name}</div>\r\n    <svg ref={inputRef} />\r\n  </>;\r\n}\r\n\r\nexport default Barcode","import { useEffect, useState } from 'react';\r\nimport { AppBar, Button, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { GoogleLogout } from 'react-google-login';\r\nimport { generateRandomCode } from \"./Generator\"\r\nimport { Storage } from './Storage'\r\nimport { range } from './Util'\r\nimport Barcode from './Barcode'\r\nimport './App.scss';\r\n\r\nconst CLIENT_ID = \"843901847350-30igg13jkqtha7fnb3eh7seatf09n93t.apps.googleusercontent.com\"\r\nconst SCOPES = \"https://www.googleapis.com/auth/drive.file\";\r\n\r\nvar storage = new Storage()\r\n\r\nfunction App() {\r\n  const [header, setHeader] = useState(\"Header\")\r\n  const [quantity, setQuantity] = useState(18)\r\n  const [codes, setCodes] = useState<number[]>([0])\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean | undefined>();\r\n  const [isDriveReady, setIsDriveReady] = useState<boolean>(false);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n\r\n  const onGoogleError = () => setMessage(\"Failed loading Google Client\")\r\n\r\n  useEffect(() => {\r\n    storage.init(setMessage)\r\n\r\n    gapi.load(\"client:auth2\", {\r\n      callback: async () => {\r\n        try {\r\n          await gapi.client.init({ clientId: CLIENT_ID, scope: SCOPES })\r\n          gapi.auth2.getAuthInstance().isSignedIn.listen(setIsLoggedIn);\r\n          setIsLoggedIn(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n          await gapi.client.load('drive', 'v3');\r\n          setIsDriveReady(true)\r\n        }\r\n        catch {\r\n          onGoogleError()\r\n        }\r\n      },\r\n      onerror: onGoogleError\r\n    });\r\n  }, [])\r\n\r\n  function generateNewCodes() {\r\n    setCodes(range(quantity).map(() => generateRandomCode()))\r\n  }\r\n\r\n  async function print() {\r\n    if (isLoggedIn && isDriveReady) {\r\n      try {\r\n        await storage.addNumbers(codes)\r\n        setMessage(\"\")\r\n      }\r\n      catch (e) {\r\n        setMessage(\"An error ocurred while trying to sync with the cloud. Printing codes that are not stored in the cloud is not recommended.\")\r\n      }\r\n    }\r\n\r\n    window.print()\r\n  }\r\n\r\n  return <>\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"toolbar\">\r\n        <Typography variant=\"h6\">\r\n          Random Barcode Generator\r\n        </Typography>\r\n        <Button color=\"inherit\"> {!isLoggedIn && <GoogleLogin\r\n          clientId={CLIENT_ID}\r\n          buttonText=\"Log in with Google\"\r\n          onSuccess={() => setIsLoggedIn(true)}\r\n          scope={SCOPES}\r\n          cookiePolicy={'single_host_origin'}\r\n        />}\r\n          {isLoggedIn &&\r\n            <GoogleLogout\r\n              clientId={CLIENT_ID}\r\n              buttonText=\"Logout\">\r\n            </GoogleLogout>}\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n    <main>\r\n      <div className=\"generator-config\">\r\n        <TextField label=\"Header\" type=\"text\" value={header} onChange={e => setHeader(e.target.value)} fullWidth />\r\n        <TextField label=\"Quantity\" type=\"number\" inputProps={{ maxLength: 3 }} value={quantity} onChange={e => setQuantity(parseInt(e.target.value))} fullWidth />\r\n        <Button variant=\"contained\" color=\"primary\" onClick={generateNewCodes} fullWidth>Generate Barcodes</Button>\r\n        {codes.length > 0 && codes[0] != 0 &&\r\n          <Button variant=\"outlined\" color=\"primary\" onClick={print} fullWidth>{isLoggedIn && isDriveReady && \"Save & \"}Print</Button>}\r\n        {isLoggedIn !== undefined && !isLoggedIn &&\r\n          <p>You must be logged in to prevent duplicate numbers.</p>}\r\n        <p>{message}</p>\r\n      </div>\r\n      <ul className=\"code-list\">\r\n        {codes.map(code =>\r\n          <li key={code} className=\"code-list-item\">\r\n            <Barcode key={code} name={header} value={code.toString().padStart(14, \"0\")} />\r\n          </li>)}\r\n      </ul>\r\n    </main>\r\n    <footer>\r\n      Copyright (C) 2021 Jose Torres\r\n    </footer>\r\n  </>\r\n}\r\n\r\nexport default App;\r\n","export function range(size: number, offset: number = 1) {\r\n  return Array.from({ length: size }, (_, i) => i + offset);\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}